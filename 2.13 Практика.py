# 2.13 Практика
""""""
import re
string = ''

# Task 01
regex = r'any regulal'


# Task 02
"""
Найти в тексте  все слова «Ты» или «ты». 
Другие формы слова «ты», такие как «твой» и т. д. учитывать не следует.
Input:   латынь ты цветы ланиты открыты остыли бутылкой  предметы Ты
Output: ты Ты
"""
regex = r'\b(?:Ты|ты)\b'
# regex =r'\b[Тт]ы\b'
res = re.findall(regex, string)


# Task 03
"""
Валидация hex-цветов
Найти последовательности, подходящие по следующим условиям:
- В начале стоит #
- Потом идёт последовательность из 6 шестнадцатеричных цифр верхнего и нижнего регистров: 
  0123456789abcdefABCDEF
- Последовательность не может быть подпоследовательностью
Input:  #DC143C #00FA9A #00BFFF #FF00FF #EEE8A #FF #FFD7 #940
Output: #DC143C #00FA9A #00BFFF #FF00FF
"""
# r'(?i)....'  # любой регистр
regex = r'(?i)(^|(?<=\s))(?:#[0-9a-f]{6})($|(?=\s))'

# плохое решение: слово должно быть отдельным словом, а не подпоследовательностью
# regex = r'\B(?:#[0-9a-fA-F]{6})\b'

res = re.findall(regex, string)


# Task 04
"""
From zero to hero
https://stepik.org/lesson/700477/step/5?unit=700452
найти числа x, подходящие по следующим условиям:
x ∈ [0, 1] т.е. 0 ≤ x ≤ 1
x может быть как и десятичной дробью, так и целым числом
Если x - десятичная дробь, то её максимальная точность должна быть до сотых
В тестах не будет 0.00/0.0 или 1.00/1.0. Эти числа будут записаны без плавающей точки
"""
regex = r'(?:(?<=\s)|(?<=^))(?:([01])|(0\.\d{1,2}))(?=\s|$)'
res = re.findall(regex, string)


# Task 05
"""
Найти все слова, содержащие в себе букву а.
Нужно найти последовательности, подходящие по следующим условиям:
- Используются буквы кириллического алфавита нижнего и верхнего регистров
- Последовательность должна содержать как минимум одну букву а
- Заглавную А искать не нужно
- Последовательность не может быть подпоследовательностью
Input:  Алена не АБИТУРИЕНТ - она студентка РАНХиГС! Алабама — штат США. Ау!
Output: Алена она студентка Алабама штат
"""
regex = r'\b[А-Яа-яЁё]*а[А-Яа-яЁё]*\b'
# regex = r'((?<=\s)|(?<=^))([А-ЯЁа-яё]*а[А-ЯЁа-яё]*)(?=\s|\W|$)'  # Верно но мудро
res = re.findall(regex, string)


# Task 06
"""
Найти последовательности, подходящие по следующим условиям:
- Состоит из букв кириллического алфавита нижнего и верхнего регистра
- После последовательности стоит один из знаков препинания: .,:?!;
Input:  Эй, Богдан, я здесь Эх, Богдан, Богом дан шанс
Output: Эй Богдан Эх Богдан
"""
regex = r'\b[А-Яа-яЁё]+(?=[/.,:?!;])'
res = re.findall(regex, string)


# Task 07
# До конца не решено
"""
Найти все слова подходящие по следующим условиям:
- Состоят из кириллических символов, но в ней есть как минимум 1 некириллический символ
- Состоят из некириллических символов, но в ней есть как минимум 1 кириллический символ
- Последовательности, состоящие полностью из кириллических или некириллических символов нужно игнорировать
- Используются буквы верхнего и нижнего регистров
- Знаки препинания не считаются некириллическими символами
- Не могут являться подпоследовательностью
Input:  О, х0т табc. A что такое табс? Я зашéл нe туда, кyда н4до. Почему это твич не 3абанил - не совсем понятно. 
        Господа, я полагаю стрим надо быстро заканчивать, и удалять...
Output: х0т табc зашéл нe кyда н4до 3абанил

Нacтaл0 ßремя 3aгaд0чный мек©иканской шляпe $cаm Бpо тeбe нaд0 тp3нирÖвÆтьçя шkaфy пpячycь 
х0т табc зашéл нe кyда н4до 3абанил bяdnяяwяhя фяfrwгыцw ddфdd ффdфф фfфdфф ффdфfф0, ыddsы 4ыыww 55fgjрапа
4587 abcdifg абвгдеёжзикл 
3оя @абвгдеёж абвгде@ёж абвгдеёж@
"""
regex = r'(?i)(([а-яё]+[^а-яё\s]+\w*)|([^а-яё\s]+[а-яё]+\w*))\b'
res = re.findall(regex, string)




# Task 08
"""
Найти первое слово в тексте.
Следующие условиям:
- Используются буквы кириллического алфавита верхнего и нижнего регистров
- В последовательности может содержаться дефис
- Последовательность стоит в начале строки, если её нет - первого слова нет
Input:  Какой-то текст
Output: Какой-то
"""
regex = r'(?i)^[а-яё-]+\b'
res = re.findall(regex, string)


# Task 09
"""
Н последовательности, подходящие по следующим условиям:
- Состоит из букв латинского алфавита нижнего и верхнего регистров, -
- Начинается на n или N
- Не может быть подпоследовательностью
Input:  n-word spam Nail текст nature Nice _n-word 2n-word -n-word n-w0rd n_w0rd
Output: n-word Nail nature Nice
"""
regex = r'(?i)(?<!\S)([n]{1}[a-z-]*)(?!\S)'
# (?<!\S)  заменяет  (?<=^)|(?<=\s)
# regex = r'(?i)((?<=^)|(?<=\s))([n]{1}[a-z-]*)((?= )|(?=$))'
res = re.findall(regex, string)


# Task 10
"""
Найти все переменные, записанные в стиле lowerCamelCase
- Первое слово начинается всегда с буквы нижнего регистра
- Последующие слова начинаются с букв в верхнем регистре
- Больше верхний регистр нигде не используется
- Используются буквы латинского алфавита
- Цифры в переменных из тестовых данных находятся только в конце
Input:  just_a_variable Wrong_Variable SendNudes doubleShibaInu -oneTwo3 oneTwo3- oneTTwo3
Output: doubleShibaInu
"""
regex = r'(?<!\S)[a-z]+([A-Z]{1}[a-z]+)*[0-9]*(?!\S)'
res = re.findall(regex, string)


# Task 11
"""
Найти все переменные, записанные в стиле snake_case
- Всегда используется нижний регистр
- Слова разделяются нижним подчёркиванием
- Используются буквы латинского алфавита
- Цифры в переменных из тестовых данных находятся только в конце
Input:  get_id sendMessage echo_all canvas RegularExpression upperCAse nice_Flick_SHOT that_was_bad
Output: get_id echo_all canvas that_was_bad
"""
regex = r'(?<!\S)(([a-z]+(_?(?=[a-z]|[0-9])))+[a-z]*[0-9]*)(?!\S)'
#  abc_df-g-  -abc_df2- abc_dfg_  abc_dfg_2h  - это будет пропущено

regex = r'(?<!\S)(([a-z]+_?)+[a-z]*[0-9]*)(?!\S)'  # Пропускает abc_
res = re.findall(regex, string)


# Task 12
"""
Обеспечить валидность username, в котором выполняются следующие условия:
- Используются символы a-z, A-Z, 0-9, _
- Длина от 5 до 32 символов включительно
- Не может начинаться с цифры или _
- Не может заканчиваться на _
Ещё одно условие (по желанию): username не может содержать в себе __
Input:  *
Output: suDhAsa010 Thematdev  a_e_i_o_u_hacker143 barry021 aikaravinu  awidok mechanarutosucks
исключение 2-х и более __
w_r__ong  w__r_ong  w_r__on_g  w_r_o_n___g  wron__g
"""
regex = r'(?i)(?<!\S)[a-z]{1}([a-z0-9]|((?<!_)_)){3,30}[a-z0-9]{1}(?!\S)'
# (?i)(?<!\S)[a-z]{1}(_?[a-z0-9]){3,30}[a-z0-9]{1}(?!\S) #  без учета ww__www
res = re.findall(regex, string)


# Task 13
"""
Найти в тексте все названия файлов и их расширения.
Последовательности, подходящие по следующим условиям:
- Название файла состоит из: букв латинского алфавита верхнего и нижнего регистров, цифр, -
- Между названием и расширением файла стоит .
- Расширение файла состоит из букв латинского алфавита верхнего и нижнего регистров, цифр
- Минимальная длина названия и расширения - один символ
- Найденная последовательность может являться подпоследовательностью,
    только если стоит в абсолютном или относительном пути: C:\Users\test.txt, ../Users/test.txt, 
    т.е. перед ней стоят символы / или \
Input:  C:\Users\script.js index.html Untitled-10.psd .mp4 ?s.csv some-text
Output: script.js index.html Untitled-10.psd
"""
regex = r'(?i)(?:(?<![^\s/\\]))[a-z0-9-]+\.[a-z0-9]+(?!\S)'  # короче
regex = r'(?i)(?:(?<=/)|(?<=\\)|(?<!\S))[a-z0-9-]+\.[a-z0-9]+(?!\S)'
res = re.findall(regex, string)


# Task 14
"""
Получить все идентификаторы видеороликов на YouTube
Условия:
- Cостоит из символов латинского алфавита обоих регистров, цифр, а также _
- Перед последовательностью стоит v=
Input:  https://www.youtube.com/watch?v=jNQXAC9IVRw
Output: jNQXAC9IVRw
"""
regex = r'(?i)(?<=v=)[a-z0-9_]+'  # по условию допускается подстрока и _
res = re.findall(regex, string)


# Task 15
"""
Найти  валидные пустые массивы, или массивы с числами. Числом считаем произвольную последовательность из цифр.
Условия:
- Начинается с [ и заканчиваются на ]
- Внутри может быть пусто, а могут находиться числа
- Числом считаем произвольную последовательность из цифр
- Между числами должны стоять запятые
- Запятые могут быть как и с пробелом, так и без
- После последнего числа может стоять запятая, т.к. такие массивы: [123, 123, ] и [23, ] валидные в Python
Input:  [123, 123, ][23, ][0][1,][1,2,3][1 2 3 4] [, 123, 123]
Output: [123, 123, ][23, ][0][1,][1,2,3]
"""
regex = r'\[(\d(,|, )?)*\]'
res = re.findall(regex, string)
