# 2.09 Жадные квантификаторы
""""""
import re
string = ''

# Task 01
"""
Найти последовательности use strict; и use strict
Input:  someSpamuuse stricttещёспам
Output: use strict
"""
regex = r'use strict;?'
res = re.findall(regex, string)


# Task 02
"""
Найти последовательности, подходящие по следующим условиям:
- Состоит как минимум из 2-ух букв
- Используется латинский и кириллический алфавиты верхнего регистра
Input:  Для сдачи ЕГЭ следует пройти через КПП, поздороваться с ОМОНом и СОБРом, пройти в ППЭ, и получить КИМы.
Output: ЕГЭ КПП ОМОН СОБР ППЭ КИМ
"""
regex = r'[A-ZА-ЯЁ]{2,}'
res = re.findall(regex, string)


# Task 03
"""
Валидация номерных знаков
https://stepik.org/lesson/694360/step/8?unit=694141
Левая часть:
Используются арабские цифры и 12 букв кириллицы в нижнем регистре, 
имеющие графические аналоги в латинском алфавите: авекмнорстух

Правая часть (регион):
Регионом считаем любую последовательность арабских цифр длиной от 2 до 3 включительно
Номера не могут быть подпоследовательностью, они должны быть отделены

Input:  с065мк8 з724ок14 м976мм76 л147ом31 г944ть6 с206рн345
Output: м976мм76 с206рн345
"""
regex = r'\b[авекмнорстух]\d{3}[авекмнорстух]{2}\d{2,3}'
res = re.findall(regex, string)


# Task 04
"""
Найти последовательности, подходящие по следующим условиям:
- Состоит из 15 арабских цифр
- Не является подпоследовательностью
Input:  Lorem sapien tortor, 573458344082324 mollis at egestas, 348530789534050 molestie vitae.
Output: 573458344082324 348530789534050
"""
regex = r'\b\d{15}'
res = re.findall(regex, string)


# Task 05
"""
Напишите регулярное выражение, которое найдёт все пары координат в тексте: широту и долготу.
Координата:
- Может быть отрицательной или положительной
- В левой части может стоять от 1 до 3 арабских цифр включительно
- В правой части количество цифр неограничено
- Левая и правая части разделены точкой
- Координаты разделены пробелами
    Т.е. нужно написать регулярное выражение, 
    которое будет искать 2 координаты, разделённые пробелом.
Input:  Ориентир - красная изолента. Прикоп 2-3см 16.874124 -24.984161
Output: 16.874124 -24.984161
"""
regex = r'-?\b\d{1,3}\.\d*\s-?\d{1,3}\.\d*'
# regex = r'\b-?\d{1,3}\.\d+\s-?\d{1,3}\.\d+\b'
# regex = r'(?<!\d)-?\d{1,3}\.\d+\s-?\d{1,3}\.\d+\b'

res = re.findall(regex, string)


# Task 06
"""
https://stepik.org/lesson/694360/step/11?unit=694141
Адрес ETH кошельков состоит из двух частей:
Левая часть (префикс):
0x
Правая часть (регион):
Длина 40 символов
Используются все символы шестнадцатеричной системы счисления в нижнем и верхнем регистрах:
0xEfC6c84DAB123F0e5daba01Abe6F4d83c52BDbE2
Input:  
Output: 
"""
regex = r'0x[a-fA-F0-9]{40}'
res = re.findall(regex, string)


# Task 07
"""
Напишите регулярное выражение, которое извлекает протокол полученной ссылки: http или https
Input:  http://127.0.0.1:5500/index.html
Output: http
"""
regex = r'https?(?=://)'
res = re.findall(regex, string)


# Task 08
"""
Найти последовательности, состоящие из римских цифр: IVXLCDM
Input:  Сейчас MMXXII год.
Output: MMXXII
"""
regex = r'[IVXLCDM]+'
res = re.findall(regex, string)


# Task 09
"""
Найти все смайлики в тексте.
используются следующие символы:
- Глаза: :8;¦=
- Нос: ^-
- Рот: |\0()/PODIC
Input:  ¦I734m8/тшAFТ¦0dtoю6:OQЮРе:|Yщ:/СЬmfK8/VбcКг:/0Цf=|НЫ9s8\uhУ:^^|
Output: ¦I 8/ ¦0 :O :| :/ 8/ :/ =| 8\
"""
regex = r'[:8;=¦]{1}[-^]?[|\\0()/PODIC]{1}'
res = re.findall(regex, string)

