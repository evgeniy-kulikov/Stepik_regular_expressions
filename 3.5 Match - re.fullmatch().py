# 3.5 Match - re.fullmatch()
""""""
"""
re.fullmatch(pattern, string, flags=0)
определяет соответствие строки переданному шаблону. 
Если вся строка соответствует шаблону - выводит объект Match, иначе - None.

Параметры:
pattern - регулярное выражение
string - строка, к которой нужно применить регулярное выражение
flags - флаги

Возвращаемое значение:
Объект Match, если вся строка соответствует шаблону
None, если строка не соответствует шаблону
"""

# Task 01
"""
Найдите все последовательности цифр, которые начинаются от 13 цифр включительно.
Выводится True, иначе - False.
Input:  0123456789123
Output: True
"""
import re
pattern = r"[0-9]{13,}"
string = input()
res = re.fullmatch(pattern, string)
print(True if res else False)


# Task 02
"""
Проверить пароль на валидность. Валидным будем считать пароль, который:
Состоит из a-z, A-Z, 0-9, @#$%^&*()_-+!?
Его длина минимум 8 символов
Input:  d2D8dh8DA#!
Output: True
"""
import re
pattern = r"(?i)[a-z0-9@#$%^&*()_+!?-]{8,}"
string = input()
res = re.fullmatch(pattern, string)
print(True if res else False)


# Task 03
"""
Номера телефонов
- Номер может начинаться с +
- Потом идут цифры
- В каждом номере минимум 11 цифр
- Между цифрами могут быть разделители: ( )-
- Длина разделителя от 0 до 2 символов включительно
Input:  7(977)8179710
Output: True

# находит как верные (а так же бредовые) но все по условию задачи
+7(123) 456 78 90
+71234567890
7(123)4567890
+7(123) 456-(78)-90
+7 -123-456-78-90
7 1 2 3 4 5 6 7 8 9 0
7--1--2--3))4((5-)6(-7))8 -9- 0
+7123))4((5--6  78-9--0((1))2
+7  12345--6789099))123
"""
import re
pattern = r'^\+?(?:\d{1}[() -]{,2}){10,}\d$'
string = input()
res = re.fullmatch(pattern, string)
print(True if res else False)


# Task 04
"""
Найдите все последовательности, которые могут быть многочленами. 
Многочлен состоит из слагаемых. 
Каждое слагаемое это следующее произведение:
- Первым множителем может быть целое число (любая последовательность цифр)
- Числа могут быть отрицательными
- Вторым множителем может быть x
- x может быть возведён в любую степень (любая последовательность цифр)
- Между множителями ничего не стоит
- в произведении может не быть одного из множителей
- x не всегда возведен в какую-либо степень
- Между слагаемыми стоит - или +.
Input:  x^3-11x^2+38x-40
Output: True
__True__
-x
-9
x^15
25x
25x^15
x^3-11x^2+38x-40
6x^4+19x^3-7x^2-26x+12
15x^5-8x^4+46x^3+21x^2-21x+3
-4x^6+9x^5-x^4+22x^3-x^2+9x-18
6x^4+x^3+2x^2-4x+1
5x+2
x^2-x
__False__
-x9
x792x
xx
--34
x^3+14^x
-^10
^23
23^
"""
import re

pattern = r'([+-]?\d*(?:x\^\d+|x)?\b)+'

# Эта регулярка самостоятельно все решает
# pattern = r'^(([+-]?)(((?!\^)\d+(?!\^))|((?<!x)x(\^\d+)?)(?!(\d|x))|(\d+x(\^\d+)?)))+$'

string = input()
res = re.fullmatch(pattern, string)
print(True if res else False)
