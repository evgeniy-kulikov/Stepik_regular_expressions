# 4.4 Группы в re.sub() и re.subn()
""""""

"""
Группы в re.sub() и re.subn() ничего не дают, но их можно использовать в заменах!
Если в строке, на которую будет происходить замена найденных совпадений написать \n или \g<name>, 
где n это номер группы, а name это имя группы, то они будут заменены на совпадения этих групп
"""
import re
string = "Странен, кто пишет дату в формате: mm/dd/yyyy. Не пишите так: 02*22*2024 или 07_13_2024"

print(re.sub(r'(\d{2}).(\d{2}).(?P<year>\d{4})', r'\2-\1-\g<year>', string))
# Странен, кто пишет дату в формате: mm/dd/yyyy. Не пишите так: 22-02-2022 или 13-07-2022.


#  * * * * * * * * * *   T a s k   * * * * * * * * * *


# Task 01
"""
Нужно заменить 2 повторяющиеся слова на одно:
Слова состоят из кириллических букв
Между ними стоит пробел
Если у слов разный регистр - слова разные

Input:  Нужно удалять удалять повторяющиеся слова слова да Да.
Output: Нужно удалять повторяющиеся слова да Да.
"""
import re

string = input()
regex = r'(?P<twin>[а-яА-ЯёЁ]+)\s(?P=twin)'
regex_2 = r'\g<twin>'

res = re.sub(regex, regex_2, string)
print(res)


# Task 02
"""
Markdown в HTML
Замените **Жирный текст** на <strong>Жирный текст</strong>, и *Курсив* на <em>Курсив</em>

Нужно найти следующие последовательности:
Начинается и заканчивается с ** или * 
В середине последовательность любой длины из букв кириллического и латинского алфавитов обоих регистров, 
а также пробелов , и заменить:
**text** на <strong>text</strong>
*text* на <em>text</em>

Input:  Как же я люблю **Markdown**!
Output: Как же я люблю <strong>Markdown</strong>!
"""
import re

regex_1 = r'\*{2}([\w\s]+)\*{2}'
regex_b = r'<strong>\1</strong>'

regex_2 = r'\*([\w\s]+)\*'
regex_it = r'<em>\1</em>'
res = re.sub(regex_2, regex_it, re.sub(regex_1, regex_b, input()))
print(res)

# Длиннее
regex_1 = r'\*\*(?P<bold>[\w\s]+)\*\*'
regex_b = r'<strong>\g<bold></strong>'
bold = re.sub(regex_1, regex_b, string)

regex_2 = r'\*(?P<italy>[\w\s]+)\*'
regex_it = r'<em>\g<italy></em>'
italy = re.sub(regex_2, regex_it, bold)
print(italy)


# Task 03
"""
Найдите все прокси, и добавьте к ним в начало протокол http://
Нужно найти следующие последовательности:

Адрес состоит из любых числовых последовательностей, разделённых .
В середине стоит :
Порт является любой числовой последовательностью
и в начало к ним добавить протокол http://
Input:  Будем 193.193.240.37:45944 считать 221.182.31.54:8080 что 200.199.38.234:8080 все...
Output: Будем http://193.193.240.37:45944 считать http://221.182.31.54:8080 что http://200.199.38.234:8080 все...
"""
import re

string = input()
# regex = r'([0-9\.]+:\d+)'
regex = r'((\d+\.)+\d+:\d+)'
regex_2 = r'http://\1'

res = re.sub(regex, regex_2, string)
print(res)


# Task 04
"""
Нужно найти следующие последовательности:
- Дата типа mm/dd/yyyy
- mm, dd, yyyy - любые числовые последовательности длиной 2, 2, 4 соответственно
- Между ними стоят разделители . или /
и переставить mm с dd местами, чтобы получилась дата вида dd/mm/yyyy  или  dd.mm.yyyy
Input:  Сегодня 04/24/2022.
Output: Сегодня 24/04/2022.
"""
import re

string = input()
regex = r'(\d{2}[/\.])(\d{2}[/\.])'
regex_2 = r'\2\1'

res = re.sub(regex, regex_2, string)
print(res)


# Task 05
"""
Замените егонный/еённый/ихний на его/её/их
Нужно найти следующие последовательности:
- Начинается с его/её/их или Его/Её/Их
- Потом идёт последовательность кириллических букв максимальной длины
  и убрать из них ненужную часть.
Input:  Это был егонный билет.
Output: Это был его билет.
"""
import re

string = input()

regex = r'([еЕ]го|[еЕ]ё|[иИ]х)[а-яё]+'
regex_2 = r'\1'
res = re.sub(regex, regex_2, string)
print(res)

# Через цикл
regex = [r'([еЕ]го)[а-яё]+', r'([еЕ]ё)[а-яё]+', r'([иИ]х)[а-яё]+']
regex_2 = r'\1'
for el in regex:
    res = re.sub(el, regex_2, string)
    string = res
print(res)


"""
match.expand(template)
Метод работает почти как функция re.sub() с группами:

Зачем нужен match.expand():
match.expand() генерирует строку, путём вставки в неё значений из найденных групп.

re.sub() ищет совпадения в тексте, если совпадения найдены, то генерирует строку, 
путём вставки в неё значений из найденных групп, и заменяет совпадения на сгенерированные строки.

С помощью match.expand() удобно генерировать строки с найденными данными.
"""
import re

match = re.search(r"(\d{4})", "Бойцовский клуб (1999)")
print(match.expand(r"Год выпуска фильма: \1"))  # Год выпуска фильма: 1999


# Task 06
"""
Нужно найти первую цену в тексте:
- Любая числовая последовательность
- В конце стоит ₽$
и подставить её в строку Цена данного товара x
На вход программе подаётся 1 строка.
Input:  Товар/подписка менее 300$ (2$ дополнительная плата)
Output: Цена данного товара 300$
"""
import re

# string = input()
regex = r'(\d+[₽$])'

res = re.search(regex, string)
if res:
    print(res.expand(r'Цена данного товара \1'))
