# 6.7 re.VERBOSE
""""""

"""
Позволяет писать более читабельные регулярные выражения, 
отделять части регулярного выражения пробелами и переносами строк, 
а также писать комментарии после символа #.

Полная версия:
re.VERBOSE

Сокращённая версия:
re.X

Встроенный флаг:
(?x)

Числовое представление:
64
"""

import re

test1 = re.findall(r"""[1-9] +  # Любая цифра, кроме 0
                   .            # Любой символ, кроме новой строки
                   \d {2,}      # Любая цифра""", '4G22', flags=re.VERBOSE)

test2 = re.findall(r"""
                        [1-9] +
                        .
                        \d {2,}
                   """, '4G22', flags=re.VERBOSE)

print(test1, test2)  # ['4G22'] ['4G22']

# Использование сокращённых и встроенных флагов:
test1 = re.findall(r"""[1-9] +
                   .
                   \d {2,}""", '4G22', flags=re.VERBOSE)

test2 = re.findall(r"""[1-9] +
                   .
                   \d {2,}""", '4G22', flags=re.X)

test3 = re.findall(r"""(?x)
                   [1-9] +
                   .
                   \d {2,}""", '4G22')

print(test3)  # ['4G22']
print(test1 == test2 and test2 == test3)  # True


#  * * * * * * * * * *   T a s k   * * * * * * * * * *


# Task 01
"""
В этом задании нужно использовать флаг, но не используйте встроенные флаги
и никак не изменяйте регулярное выражение - иначе оно не пройдёт проверку.
Если что, встроенный флаг - это флаг, который пишется в самом регулярном выражении.
"""
import re

pattern = re.compile(r"""
(?:
    (?:\s*[+>~,]\s*|\s+)
    |
    [^:+>~,\s\\[\]]+(?:\\.[^:+>~,\s\\[\]]*)*
)
|
\[(?:
    [^\\[\]]*(?:\\.[^\\[\]]*)*
    |
    [^=]+=~?\s*
    (?:
        "[^\\"]*(?:\\.[^"\\]*)*"
        |
        '[^\\']*(?:\\.[^'\\]*)*'
    )
)\]
|
:[^\\:([]+(?:\\.[^\\:([]*)*
(?:
    \((?:
        [^\\()]*(?:\\.[^\\()]*)*
        |
        "[^\\"]*(?:\\.[^"\\]*)*"
        |
        '[^\\']*(?:\\.[^'\\]*)*'
    )\)
)?
""", flags=re.VERBOSE)
